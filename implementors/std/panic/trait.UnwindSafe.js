(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; UnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; UnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; UnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for DecoderReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for EncoderWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for EncoderStringWriter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UninitSlice","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BytesMut","synthetic":true,"types":[]}];
implementors["carapax"] = [{"text":"impl&lt;C&gt; !UnwindSafe for Dispatcher&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoggingErrorHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorPolicy","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for HandlerResult","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for AccessHandler&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InMemoryAccessPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Principal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrincipalUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrincipalChat","synthetic":true,"types":[]},{"text":"impl&lt;C, B, H, S&gt; !UnwindSafe for Dialogue&lt;C, B, H, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for DialogueResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Locale","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocaleNotFound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslatorStore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslationKey","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DirectRateLimitHandler","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; !UnwindSafe for KeyedRateLimitHandler&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RateLimitList","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for SessionManager&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionIdError","synthetic":true,"types":[]}];
implementors["combine"] = [{"text":"impl&lt;T, R&gt; UnwindSafe for Info&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; !UnwindSafe for Error&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, R, P&gt; !UnwindSafe for Errors&lt;T, R, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Stream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R, F&gt; UnwindSafe for Info&lt;T, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Token&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Range&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Format&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Commit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnexpectedParse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringStreamError","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Tracked&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for ParseResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bufferless","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for Stream&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Position: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Token: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, X&gt; UnwindSafe for Stream&lt;Input, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexPositioner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourcePosition","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Stream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Span&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; UnwindSafe for Stream&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; UnwindSafe for Stream&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, P&gt; !UnwindSafe for Error&lt;E, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, P, C&gt; UnwindSafe for Decoder&lt;S, P, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for PartialStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for CompleteStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for MaybePartialStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for SliceStream&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for IteratorStream&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for PointerOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for TakeUntilByte&lt;Input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for TakeUntilByte2&lt;Input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for TakeUntilByte3&lt;Input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for Digit&lt;Input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Choice&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P1, P2&gt; UnwindSafe for Or&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Optional&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for NotFollowedBy&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Try&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for LookAhead&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for Map&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for MapInput&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for FlatMap&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for AndThen&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for Recognize&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; UnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for NoPartial&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Ignore&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AnyPartialState","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for AnyPartialStateParser&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AnySendPartialState","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for AnySendPartialStateParser&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AnySendSyncPartialState","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for AnySendSyncPartialStateParser&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Lazy&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, R&gt; UnwindSafe for Factory&lt;P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, O, P&gt; UnwindSafe for FromStr&lt;Input, O, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, Input, O, S&gt; UnwindSafe for Opaque&lt;F, Input, O, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;InputInner, P, C&gt; UnwindSafe for InputConverter&lt;InputInner, P, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Spanned&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, E&gt; UnwindSafe for Unexpected&lt;I, T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, S&gt; UnwindSafe for Message&lt;P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, S&gt; UnwindSafe for Expected&lt;P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Silent&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, F&gt; UnwindSafe for FnParser&lt;Input, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, Input, T&gt; UnwindSafe for EnvParser&lt;E, Input, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for Range&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, P&gt; UnwindSafe for Recognize&lt;Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for RecognizeWithValue&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for Take&lt;Input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Input, F&gt; UnwindSafe for TakeWhile&lt;Input, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, F&gt; UnwindSafe for TakeWhile1&lt;Input, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for TakeUntilRange&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TakeRange","synthetic":true,"types":[]},{"text":"impl&lt;F, Input&gt; UnwindSafe for TakeFn&lt;F, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, Input, P&gt; UnwindSafe for Count&lt;F, Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, P&gt; UnwindSafe for SkipCount&lt;Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for CountMinMax&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, P&gt; UnwindSafe for SkipCountMinMax&lt;Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Input, P, S, M&gt; !UnwindSafe for Iter&lt;'a, Input, P, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for Many&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for Many1&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, P&gt; UnwindSafe for SkipMany&lt;Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, P&gt; UnwindSafe for SkipMany1&lt;Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; UnwindSafe for SepBy&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; UnwindSafe for SepBy1&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; UnwindSafe for SepEndBy&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; UnwindSafe for SepEndBy1&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Op&gt; UnwindSafe for Chainl1&lt;P, Op&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Op&gt; UnwindSafe for Chainr1&lt;P, Op&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for TakeUntil&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, P&gt; UnwindSafe for SkipUntil&lt;Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, E&gt; UnwindSafe for RepeatUntil&lt;F, P, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, P, E&gt; UnwindSafe for SkipRepeatUntil&lt;Input, P, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for EscapedState&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q, I&gt; UnwindSafe for Escaped&lt;P, Q, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, I, P&gt; UnwindSafe for Iterate&lt;F, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for PartialState1&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for PartialState2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; UnwindSafe for PartialState3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; UnwindSafe for PartialState4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; UnwindSafe for PartialState5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F&gt; UnwindSafe for PartialState6&lt;A, B, C, D, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G&gt; UnwindSafe for PartialState7&lt;A, B, C, D, E, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H&gt; UnwindSafe for PartialState8&lt;A, B, C, D, E, F, G, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I&gt; UnwindSafe for PartialState9&lt;A, B, C, D, E, F, G, H, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J&gt; UnwindSafe for PartialState10&lt;A, B, C, D, E, F, G, H, I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K&gt; UnwindSafe for PartialState11&lt;A, B, C, D, E, F, G, H, I, J, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L&gt; UnwindSafe for PartialState12&lt;A, B, C, D, E, F, G, H, I, J, K, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L, M&gt; UnwindSafe for PartialState13&lt;A, B, C, D, E, F, G, H, I, J, K, L, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N&gt; UnwindSafe for PartialState14&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P&gt; UnwindSafe for PartialState15&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q&gt; UnwindSafe for PartialState16&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q, R&gt; UnwindSafe for PartialState17&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q, R, S&gt; UnwindSafe for PartialState18&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q, R, S, T&gt; UnwindSafe for PartialState19&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q, R, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q, R, S, T, U&gt; UnwindSafe for PartialState20&lt;A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, Q, R, S, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P1, P2&gt; UnwindSafe for With&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P1, P2&gt; UnwindSafe for Skip&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, L, R, P&gt; UnwindSafe for Between&lt;Input, L, R, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for Then&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for ThenPartial&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for ThenRef&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for Any&lt;Input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Input, P&gt; UnwindSafe for Satisfy&lt;Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, P&gt; UnwindSafe for SatisfyMap&lt;Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for Token&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Token: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, E, T, Input&gt; UnwindSafe for Tokens&lt;C, E, T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T, Input&gt; UnwindSafe for TokensCmp&lt;C, T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for Position&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Input&gt; UnwindSafe for OneOf&lt;T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Input&gt; UnwindSafe for NoneOf&lt;T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, T&gt; UnwindSafe for Value&lt;Input, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input, F&gt; UnwindSafe for Produce&lt;Input, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Input&gt; UnwindSafe for Eof&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; UnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["encoding"] = [{"text":"impl UnwindSafe for CodecError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecoderTrap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncoderTrap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorDecoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASCIIEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASCIIEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASCIIDecoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SingleByteEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SingleByteEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SingleByteDecoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UTF8Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UTF8Encoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UTF8Decoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Little","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Big","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UTF16Encoding&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UTF16Encoder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UTF16Decoder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Windows949Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Windows949Encoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EUCJPEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EUCJPEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Windows31JEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Windows31JEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ISO2022JPEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ISO2022JPEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GBK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GB18030","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GBEncoding&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GBEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HZEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HZEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigFive2003Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigFive2003Encoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncoderOnlyUTF8Encoding","synthetic":true,"types":[]}];
implementors["encoding_rs"] = [{"text":"impl UnwindSafe for Latin1Bidi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoderResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecoderResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Decoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncoderResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Encoder","synthetic":true,"types":[]}];
implementors["evmap"] = [{"text":"impl&lt;K, V, M&nbsp;=&nbsp;(), S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for WriteHandle&lt;K, V, M, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, M, S&gt; UnwindSafe for ReadHandle&lt;K, V, M, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, M, S&gt; UnwindSafe for ReadHandleFactory&lt;K, V, M, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CopyValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; !UnwindSafe for Predicate&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !UnwindSafe for Operation&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; UnwindSafe for Options&lt;M, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl UnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl UnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; UnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for WeakShared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; UnwindSafe for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; UnwindSafe for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; UnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; UnwindSafe for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; UnwindSafe for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; UnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; UnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; UnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; UnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; UnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; UnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; UnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, FromA, FromB&gt; UnwindSafe for Unzip&lt;St, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; UnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for Next&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for SelectNextSome&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for Peek&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; UnwindSafe for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; UnwindSafe for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !UnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; !UnwindSafe for SplitSink&lt;S, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; !UnwindSafe for ReuniteError&lt;T, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; UnwindSafe for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; UnwindSafe for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for TryNext&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; UnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; UnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for TryBuffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !UnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; UnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Close&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; UnwindSafe for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Feed&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Flush&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; UnwindSafe for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; UnwindSafe for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Send&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, St&gt; !UnwindSafe for SendAll&lt;'a, Si, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F, R&gt; UnwindSafe for Unfold&lt;T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; UnwindSafe for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; UnwindSafe for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; UnwindSafe for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Close&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W&gt; !UnwindSafe for Copy&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W&gt; !UnwindSafe for CopyBuf&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for FillBuf&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Flush&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; UnwindSafe for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for Read&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadVectored&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadExact&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadLine&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadToEnd&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadToString&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadUntil&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; !UnwindSafe for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Write&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for WriteVectored&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for WriteAll&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; !UnwindSafe for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]}];
implementors["gettext"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParseOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Catalog","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reason","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ReadySendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !UnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PushPromise","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PushPromises","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !UnwindSafe for Handshake&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !UnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SendResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SendPushedResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SendStream&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlowControl","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PingPong","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ping","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pong","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; UnwindSafe for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !UnwindSafe for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !UnwindSafe for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for RawOccupiedEntryMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !UnwindSafe for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; UnwindSafe for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !UnwindSafe for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !UnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !UnwindSafe for VacantEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; UnwindSafe for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; UnwindSafe for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CollectionAllocErr","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T&gt; UnwindSafe for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Values&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ValuesMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ValueIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ValueDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ToStrError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Authority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scheme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uri","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidUri","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Extensions","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for Data&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Trailers&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["httpdate"] = [{"text":"impl UnwindSafe for HttpDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !UnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Upgraded","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Name","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GaiResolver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GaiAddrs","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GaiFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpInfo","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Connected","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !UnwindSafe for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !UnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; !UnwindSafe for Connect&lt;C, B, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AddrIncoming","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AddrStream","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Http&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F, E&gt; UnwindSafe for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, E&nbsp;=&nbsp;Exec&gt; !UnwindSafe for Connection&lt;T, S, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; UnwindSafe for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for Builder&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_rustls"] = [{"text":"impl&lt;T&gt; !UnwindSafe for HttpsConnector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for MaybeHttpsStream&lt;T&gt;","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; UnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; UnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ipnet"] = [{"text":"impl UnwindSafe for IpAddrRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4AddrRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6AddrRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpNet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4Net","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6Net","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrefixLenError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpSubnets","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4Subnets","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6Subnets","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddrParseError","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelError","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl UnwindSafe for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl UnwindSafe for MimeGuess","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IterRaw","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl UnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocketAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Waker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpSocket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpKeepalive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixStream","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;UnwindSafe&gt; UnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl UnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]}];
implementors["ratelimit_meter"] = [{"text":"impl&lt;P&gt; !UnwindSafe for State&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for NotUntil&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for GCRA&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for LeakyBucket&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !UnwindSafe for State&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for TooEarly&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FakeAbsoluteClock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MonotonicClock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SystemClock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FakeRelativeClock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InconsistentCapacity","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for NegativeMultiDecision&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Allower","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impossible","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Always","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeverClock","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; UnwindSafe for DirectRateLimiter&lt;A, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Algorithm&lt;&lt;C as Clock&gt;::Instant&gt;&gt;::BucketState: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, A&gt; UnwindSafe for Builder&lt;C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, A&nbsp;=&nbsp;LeakyBucket&lt;&lt;MonotonicClock as Clock&gt;::Instant&gt;, C&nbsp;=&nbsp;MonotonicClock, H&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for KeyedRateLimiter&lt;K, A, C, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, C, A, H&gt; UnwindSafe for Builder&lt;K, C, A, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["redis"] = [{"text":"impl UnwindSafe for Rule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AclInfo","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;Pin&lt;Box&lt;dyn AsyncStream + 'static + Send + Sync, Global&gt;&gt;&gt; !UnwindSafe for PubSub&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;Pin&lt;Box&lt;dyn AsyncStream + 'static + Send + Sync, Global&gt;&gt;&gt; !UnwindSafe for Connection&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MultiplexedConnection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Coord&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RadiusOrder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RadiusOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RadiusSearchResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamMaxlen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamClaimOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamReadOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamReadReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamRangeReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamClaimReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamPendingReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamPendingData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamPendingCountReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamInfoStreamReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamInfoConsumersReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamInfoGroupsReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamInfoConsumer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamInfoGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamPendingId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Arg&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pipeline","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for AsyncIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; UnwindSafe for ControlFlow&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LposOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectionAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectionInfo","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Connection","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for PubSub&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Msg","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Script","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ScriptInvocation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NumericBehavior","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RedisError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InfoDict","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequences","synthetic":true,"types":[]}];
implementors["reqwest"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Form","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ClientBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RequestBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Proxy","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Policy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attempt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Action","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identity","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl UnwindSafe for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SealingKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpeningKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nonce","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnboundKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LessSafeKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unspecified","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyRejected","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Salt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; UnwindSafe for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SystemRandom","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RsaParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for UnparsedPublicKey&lt;B&gt;","synthetic":true,"types":[]}];
implementors["rustls"] = [{"text":"impl UnwindSafe for AlertMessagePayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Payload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PayloadU24","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PayloadU16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PayloadU8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangeCipherSpecPayload","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for u24","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageDeframer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtocolVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientCertificateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HandshakeType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlertLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlertDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeartbeatMessageType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtensionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerNameType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NamedCurve","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NamedGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CipherSuite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECPointFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeartbeatMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECCurveType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureScheme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PSKKeyExchangeMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyUpdateRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertificateStatusType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageFragmenter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Random","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnknownExtension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerNamePayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyShareEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PresharedKeyIdentity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PresharedKeyOffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSPCertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientExtension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerExtension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientHelloPayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HelloRetryExtension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HelloRetryRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerHelloPayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertificateExtension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertificateEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertificatePayloadTLS13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyExchangeAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DigitallySignedStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientECDHParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerECDHParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECDHEServerKeyExchange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerKeyExchangePayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertificateRequestPayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertReqExtension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertificateRequestPayloadTLS13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewSessionTicketPayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewSessionTicketExtension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewSessionTicketPayloadTLS13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertificateStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HandshakePayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HandshakeMessagePayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HandshakeJoiner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessagePayload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BorrowMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientSessionKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientSessionValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSessionValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedTrustAnchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RootCertStore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TLSError","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, T&gt; !UnwindSafe for Stream&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for StreamOwned&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HandshakeSignatureValid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerCertVerified","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientCertVerified","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WebPKIVerifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowAnyAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowAnyAnonymousOrAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoClientAuth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoClientSessionStorage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for DangerousClientConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ClientConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WriteEarlyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ClientSession","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrivateKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoKeyLog","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyLogFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoServerSessionStorage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResolvesServerCertUsingSNI","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClientHello&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ServerConfig","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ServerSession","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BulkAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SupportedCipherSuite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ticketer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CertifiedKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSASigningKey","synthetic":true,"types":[]}];
implementors["sct"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Log&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["seance"] = [{"text":"impl&lt;B&gt; !UnwindSafe for SessionCollector&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SessionCollectorHandle","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for SessionManager&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for Session&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SessionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilesystemBackend","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FilesystemBackendError","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for RedisBackend&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RedisBackendError","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; UnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; UnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; UnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Serializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; UnwindSafe for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !UnwindSafe for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !UnwindSafe for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !UnwindSafe for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]}];
implementors["shellwords"] = [{"text":"impl UnwindSafe for MismatchedQuotes","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; UnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["snafu"] = [{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsualCase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsedInTightLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnafuErrorAsSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceErrorDoesNotHaveBacktrace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigFileError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; UnwindSafe for Leaf&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Intermediate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoneError","synthetic":true,"types":[]}];
implementors["socket2"] = [{"text":"impl UnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Domain","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["tgbot"] = [{"text":"impl !UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Api","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ApiError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParseProxyError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DownloadFileError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ExecuteError","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; !UnwindSafe for LongPoll&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LongPollHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LongPollOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnswerCallbackQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnswerInlineQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnswerPreCheckoutQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnswerShippingQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteChatPhoto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteChatStickerSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExportChatInviteLink","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetChat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetChatAdministrators","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetChatMembersCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeaveChat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PinChatMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetChatAdministratorCustomTitle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetChatDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetChatPermissions","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SetChatPhoto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetChatStickerSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetChatTitle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnpinAllChatMessages","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnpinChatMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetChatMember","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KickChatMember","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PromoteChatMember","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestrictChatMember","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnbanChatMember","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetMyCommands","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMyCommands","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetGameHighScores","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendGame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetGameScore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditMessageCaption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditMessageLiveLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StopMessageLiveLocation","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EditMessageMedia","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditMessageReplyMarkup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditMessageText","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForwardMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetPassportDataErrors","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendQuiz","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendPoll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StopPoll","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendAnimation","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendAudio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendChatAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendContact","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendDice","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendInvoice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendLocation","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendMediaGroup","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendPhoto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendVenue","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendVideo","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendVideoNote","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendVoice","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AddStickerToSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteStickerFromSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetStickerSet","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CreateNewStickerSet","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendSticker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetStickerPositionInSet","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SetStickerSetThumb","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UploadStickerFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetUpdates","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetWebhook","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteWebhook","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetWebhookInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Close","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetMe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetUserProfilePhotos","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogOut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Animation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Audio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BotCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BotCommandError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CallbackQuery","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CallbackQueryError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChatLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChatMember","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChatMemberAdministrator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChatMemberKicked","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChatMemberRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChatPermissions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChatPhoto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Chat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelChat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupChat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrivateChat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SupergroupChat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChatId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChatAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Contact","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiceKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Document","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputFileInfo","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InputFileReader","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InputFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Game","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GameHighScore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMessageContent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMessageContentContact","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMessageContentLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMessageContentText","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMessageContentVenue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultArticle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultAudio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultCachedAudio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultCachedDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultCachedGif","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultCachedMpeg4Gif","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultCachedPhoto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultCachedSticker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultCachedVideo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultCachedVoice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultContact","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultGame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultGif","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultMpeg4Gif","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultPhoto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultVenue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultVideo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResultVoice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQueryResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChosenInlineResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMediaAnimation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMediaAudio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMediaDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMediaPhoto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputMediaVideo","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InputMedia","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InputMediaError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProximityAlertTriggered","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoginUrl","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MediaGroup","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MediaGroupError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Forward","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForwardFrom","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditMessageResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementAddress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementBankStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementDriverLicense","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementEmail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementIdentityCard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementInternalPassport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementPassport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementPassportRegistration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementPersonalDetails","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementPhoneNumber","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementRentalAgreement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementTemporaryRegistration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementUtilityBill","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedPassportElementKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PassportElementError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnexpectedEncryptedPassportElementKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PassportData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PassportFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Invoice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LabeledPrice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrderInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreCheckoutQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShippingAddress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShippingOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShippingQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SuccessfulPayment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhotoSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegularPoll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Quiz","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollAnswer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForceReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineKeyboardMarkup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineKeyboardButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineKeyboardButtonKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InlineKeyboardError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplyKeyboardMarkup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyboardButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyboardButtonPollType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplyKeyboardRemove","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplyMarkup","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReplyMarkupError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaskPositionPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaskPosition","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MaskPositionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sticker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StickerSet","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for NewSticker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextEntityBotCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextEntityPosition","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TextEntityError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Text","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Update","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WebhookInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedUpdate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Me","synthetic":true,"types":[]},{"text":"impl UnwindSafe for User","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MentionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserProfilePhotos","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Venue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Video","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VideoNote","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Voice","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl UnwindSafe for DirBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenOptions","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadDir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ReadBuf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for AsyncFd&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for AsyncFdReadyGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for AsyncFdReadyMutGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryIoError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; UnwindSafe for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DuplexStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpSocket","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocketAddr","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UCred","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JoinError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for EnterGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Barrier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Permit&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for OwnedMutexGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryLockError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Notify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryAcquireError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcquireError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Sleep","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Elapsed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tokio_rustls"] = [{"text":"impl&lt;IO&gt; !UnwindSafe for TlsStream&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !UnwindSafe for TlsStream&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !UnwindSafe for Connect&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !UnwindSafe for Accept&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !UnwindSafe for FailableConnect&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !UnwindSafe for FailableAccept&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for TlsStream&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tokio_socks"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Socks5Stream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 't, S&gt; UnwindSafe for SocksConnector&lt;'a, 't, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Socks5Listener&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ProxyAddrsStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TargetAddr&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tokio_stream"] = [{"text":"impl&lt;T&gt; !UnwindSafe for ReceiverStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiverStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntervalStream","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for StreamMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl UnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; UnwindSafe for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinesCodec","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LinesCodecError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CancellationToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WaitForCancellationFuture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; UnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl&lt;T&gt; !UnwindSafe for WithDispatch&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Instrumented&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entered&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl !UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Dispatch","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Current","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interest","synthetic":true,"types":[]}];
implementors["tracing_futures"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Instrumented&lt;T&gt;","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; UnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; UnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl !UnwindSafe for Giver","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Taker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SharedGiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Closed","synthetic":true,"types":[]}];
implementors["webpki"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DNSName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DNSNameRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidDNSNameError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for EndEntityCert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TrustAnchor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TLSServerTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TLSClientTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()