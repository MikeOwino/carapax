(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Error for DecodeError","synthetic":false,"types":[]}];
implementors["carapax"] = [{"text":"impl Error for LocaleNotFound","synthetic":false,"types":[]},{"text":"impl Error for SessionIdError","synthetic":false,"types":[]}];
implementors["combine"] = [{"text":"impl Error for UnexpectedParse","synthetic":false,"types":[]},{"text":"impl Error for StringStreamError","synthetic":false,"types":[]},{"text":"impl&lt;T, R, P&gt; Error for Errors&lt;T, R, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Display + Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Display + Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Display + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;E, P&gt; Error for Error&lt;E, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Error,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Display + Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Error for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Error,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Error,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Error for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for Canceled","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl Error for SpawnError","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl Error for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any, Item&gt; Error for ReuniteError&lt;T, Item&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for ReuniteError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["gettext"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Error for InvalidHeaderName","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderValue","synthetic":false,"types":[]},{"text":"impl Error for ToStrError","synthetic":false,"types":[]},{"text":"impl Error for InvalidMethod","synthetic":false,"types":[]},{"text":"impl Error for InvalidStatusCode","synthetic":false,"types":[]},{"text":"impl Error for InvalidUri","synthetic":false,"types":[]},{"text":"impl Error for InvalidUriParts","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for InvalidNameError","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Error for PrefixLenError","synthetic":false,"types":[]},{"text":"impl Error for AddrParseError","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Error for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelError","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl Error for FromStrError","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Error for LexError","synthetic":false,"types":[]}];
implementors["redis"] = [{"text":"impl Error for RedisError","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for CaseFoldError","synthetic":false,"types":[]},{"text":"impl Error for UnicodeWordError","synthetic":false,"types":[]}];
implementors["reqwest"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rustls"] = [{"text":"impl Error for TLSError","synthetic":false,"types":[]}];
implementors["seance"] = [{"text":"impl Error for SessionError","synthetic":false,"types":[]},{"text":"impl Error for FilesystemBackendError <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: Debug + Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Error for RedisBackendError <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: Debug + Display,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["shellwords"] = [{"text":"impl Error for MismatchedQuotes","synthetic":false,"types":[]}];
implementors["snafu"] = [{"text":"impl Error for Error <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: Debug + Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Error for ConfigFileError <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: Debug + Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Error for Error <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: Debug + Display,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["tgbot"] = [{"text":"impl Error for ApiError","synthetic":false,"types":[]},{"text":"impl Error for ParseProxyError","synthetic":false,"types":[]},{"text":"impl Error for DownloadFileError","synthetic":false,"types":[]},{"text":"impl Error for ExecuteError","synthetic":false,"types":[]},{"text":"impl Error for BotCommandError","synthetic":false,"types":[]},{"text":"impl Error for CallbackQueryError","synthetic":false,"types":[]},{"text":"impl Error for CommandError","synthetic":false,"types":[]},{"text":"impl Error for InputMediaError","synthetic":false,"types":[]},{"text":"impl Error for MediaGroupError","synthetic":false,"types":[]},{"text":"impl Error for UnexpectedEncryptedPassportElementKind","synthetic":false,"types":[]},{"text":"impl Error for InlineKeyboardError","synthetic":false,"types":[]},{"text":"impl Error for ReplyMarkupError","synthetic":false,"types":[]},{"text":"impl Error for ResponseError","synthetic":false,"types":[]},{"text":"impl Error for MaskPositionError","synthetic":false,"types":[]},{"text":"impl Error for TextEntityError","synthetic":false,"types":[]},{"text":"impl Error for MentionError","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Error for ReuniteError","synthetic":false,"types":[]},{"text":"impl Error for ReuniteError","synthetic":false,"types":[]},{"text":"impl Error for JoinError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for TryLockError","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for AcquireError","synthetic":false,"types":[]},{"text":"impl Error for TryAcquireError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Elapsed","synthetic":false,"types":[]}];
implementors["tokio_socks"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Error for LengthDelimitedCodecError","synthetic":false,"types":[]},{"text":"impl Error for LinesCodecError","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Error for SetGlobalDefaultError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelFilterError","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for InvalidDNSNameError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()