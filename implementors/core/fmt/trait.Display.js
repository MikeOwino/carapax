(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Display for Base64Display&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Display for DecodeError","synthetic":false,"types":[]}];
implementors["carapax"] = [{"text":"impl Display for LocaleNotFound","synthetic":false,"types":[]},{"text":"impl Display for SessionIdError","synthetic":false,"types":[]}];
implementors["combine"] = [{"text":"impl Display for UnexpectedParse","synthetic":false,"types":[]},{"text":"impl Display for StringStreamError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Display, R:&nbsp;Display&gt; Display for Info&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R, P&gt; Display for Errors&lt;T, R, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Display, R:&nbsp;Display&gt; Display for Error&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl Display for SourcePosition","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Display, P:&nbsp;Display&gt; Display for Error&lt;E, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for PointerOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ?Sized,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Display for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Display,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Display for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for TryRecvError","synthetic":false,"types":[]},{"text":"impl Display for Canceled","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl Display for SpawnError","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl Display for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;T, Item&gt; Display for ReuniteError&lt;T, Item&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for ReuniteError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["gettext"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Reason","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Display for HeaderName","synthetic":false,"types":[]},{"text":"impl Display for InvalidHeaderName","synthetic":false,"types":[]},{"text":"impl Display for InvalidHeaderValue","synthetic":false,"types":[]},{"text":"impl Display for ToStrError","synthetic":false,"types":[]},{"text":"impl Display for Method","synthetic":false,"types":[]},{"text":"impl Display for InvalidMethod","synthetic":false,"types":[]},{"text":"impl Display for StatusCode","synthetic":false,"types":[]},{"text":"impl Display for InvalidStatusCode","synthetic":false,"types":[]},{"text":"impl Display for Authority","synthetic":false,"types":[]},{"text":"impl Display for PathAndQuery","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for Port&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for Scheme","synthetic":false,"types":[]},{"text":"impl Display for Uri","synthetic":false,"types":[]},{"text":"impl Display for InvalidUri","synthetic":false,"types":[]},{"text":"impl Display for InvalidUriParts","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for InvalidChunkSize","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Display for HttpDate","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Name","synthetic":false,"types":[]},{"text":"impl Display for InvalidNameError","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Display for PrefixLenError","synthetic":false,"types":[]},{"text":"impl Display for IpNet","synthetic":false,"types":[]},{"text":"impl Display for Ipv4Net","synthetic":false,"types":[]},{"text":"impl Display for Ipv6Net","synthetic":false,"types":[]},{"text":"impl Display for AddrParseError","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Display for Level","synthetic":false,"types":[]},{"text":"impl Display for LevelFilter","synthetic":false,"types":[]},{"text":"impl Display for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Display for ParseLevelError","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl Display for FromStrError","synthetic":false,"types":[]},{"text":"impl Display for Mime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for Name&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl&lt;'a&gt; Display for PercentEncode&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Display for TokenStream","synthetic":false,"types":[]},{"text":"impl Display for LexError","synthetic":false,"types":[]},{"text":"impl Display for TokenTree","synthetic":false,"types":[]},{"text":"impl Display for Group","synthetic":false,"types":[]},{"text":"impl Display for Punct","synthetic":false,"types":[]},{"text":"impl Display for Ident","synthetic":false,"types":[]},{"text":"impl Display for Literal","synthetic":false,"types":[]}];
implementors["ratelimit_meter"] = [{"text":"impl&lt;P:&nbsp;Reference&gt; Display for NotUntil&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Reference&gt; Display for TooEarly&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl Display for InconsistentCapacity","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Display for NegativeMultiDecision&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Display for Impossible","synthetic":false,"types":[]}];
implementors["redis"] = [{"text":"impl Display for ConnectionAddr","synthetic":false,"types":[]},{"text":"impl Display for RedisError","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Regex","synthetic":false,"types":[]},{"text":"impl Display for Regex","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for ErrorKind","synthetic":false,"types":[]},{"text":"impl Display for Ast","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for ErrorKind","synthetic":false,"types":[]},{"text":"impl Display for Hir","synthetic":false,"types":[]},{"text":"impl Display for CaseFoldError","synthetic":false,"types":[]},{"text":"impl Display for UnicodeWordError","synthetic":false,"types":[]}];
implementors["reqwest"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["ring"] = [{"text":"impl Display for Unspecified","synthetic":false,"types":[]},{"text":"impl Display for KeyRejected","synthetic":false,"types":[]}];
implementors["rustls"] = [{"text":"impl Display for TLSError","synthetic":false,"types":[]}];
implementors["seance"] = [{"text":"impl Display for SessionError","synthetic":false,"types":[]},{"text":"impl Display for FilesystemBackendError","synthetic":false,"types":[]},{"text":"impl Display for RedisBackendError","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for Unexpected&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for dyn Expected + 'a","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Value","synthetic":false,"types":[]},{"text":"impl Display for Number","synthetic":false,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["sha1"] = [{"text":"impl Display for DigestParseError","synthetic":false,"types":[]},{"text":"impl Display for Digest","synthetic":false,"types":[]}];
implementors["shellwords"] = [{"text":"impl Display for MismatchedQuotes","synthetic":false,"types":[]}];
implementors["snafu"] = [{"text":"impl Display for Backtrace","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for ConfigFileError","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Display for Lifetime","synthetic":false,"types":[]},{"text":"impl Display for LitInt","synthetic":false,"types":[]},{"text":"impl Display for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for ParseBuffer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["tgbot"] = [{"text":"impl Display for ApiError","synthetic":false,"types":[]},{"text":"impl Display for ParseProxyError","synthetic":false,"types":[]},{"text":"impl Display for DownloadFileError","synthetic":false,"types":[]},{"text":"impl Display for ExecuteError","synthetic":false,"types":[]},{"text":"impl Display for BotCommandError","synthetic":false,"types":[]},{"text":"impl Display for CallbackQueryError","synthetic":false,"types":[]},{"text":"impl Display for ChatId","synthetic":false,"types":[]},{"text":"impl Display for CommandError","synthetic":false,"types":[]},{"text":"impl Display for InputMediaError","synthetic":false,"types":[]},{"text":"impl Display for MediaGroupError","synthetic":false,"types":[]},{"text":"impl Display for ParseMode","synthetic":false,"types":[]},{"text":"impl Display for UnexpectedEncryptedPassportElementKind","synthetic":false,"types":[]},{"text":"impl Display for InlineKeyboardError","synthetic":false,"types":[]},{"text":"impl Display for ReplyMarkupError","synthetic":false,"types":[]},{"text":"impl Display for ResponseError","synthetic":false,"types":[]},{"text":"impl Display for MaskPositionError","synthetic":false,"types":[]},{"text":"impl Display for TextEntityError","synthetic":false,"types":[]},{"text":"impl Display for MentionError","synthetic":false,"types":[]},{"text":"impl Display for UserId","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Display for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'s, T&gt; Display for SliceVec&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Display for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Display,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Display for ReuniteError","synthetic":false,"types":[]},{"text":"impl Display for ReuniteError","synthetic":false,"types":[]},{"text":"impl Display for JoinError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for RecvError","synthetic":false,"types":[]},{"text":"impl Display for TryRecvError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for RecvError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for TryLockError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Display&gt; Display for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Display&gt; Display for OwnedMutexGuard&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for RecvError","synthetic":false,"types":[]},{"text":"impl Display for TryRecvError","synthetic":false,"types":[]},{"text":"impl Display for AcquireError","synthetic":false,"types":[]},{"text":"impl Display for TryAcquireError","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Display for RwLockReadGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Display for RwLockWriteGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Display for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for RecvError","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Elapsed","synthetic":false,"types":[]}];
implementors["tokio_socks"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Display for LengthDelimitedCodecError","synthetic":false,"types":[]},{"text":"impl Display for LinesCodecError","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Display for SetGlobalDefaultError","synthetic":false,"types":[]},{"text":"impl Display for dyn Value","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Display&gt; Display for DisplayValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for Field","synthetic":false,"types":[]},{"text":"impl Display for FieldSet","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for ValueSet&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Display for Level","synthetic":false,"types":[]},{"text":"impl Display for LevelFilter","synthetic":false,"types":[]},{"text":"impl Display for ParseLevelError","synthetic":false,"types":[]},{"text":"impl Display for ParseLevelFilterError","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;Display&gt; Display for Ascii&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Display&gt; Display for UniCase&lt;S&gt;","synthetic":false,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I:&nbsp;Iterator&lt;Item = char&gt; + Clone&gt; Display for Decompositions&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Iterator&lt;Item = char&gt; + Clone&gt; Display for Recompositions&lt;I&gt;","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;AsRef&lt;str&gt;&gt; Display for Host&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Display for ParseError","synthetic":false,"types":[]},{"text":"impl Display for SyntaxViolation","synthetic":false,"types":[]},{"text":"impl Display for Url","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for InvalidDNSNameError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()