(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Copy for MatchKind","synthetic":false,"types":[]},{"text":"impl Copy for MatchKind","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Copy for CharacterSet","synthetic":false,"types":[]},{"text":"impl Copy for Config","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]}];
implementors["carapax"] = [{"text":"impl Copy for ErrorPolicy","synthetic":false,"types":[]}];
implementors["combine"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Commit&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UnexpectedParse","synthetic":false,"types":[]},{"text":"impl Copy for StringStreamError","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for Tracked&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy, E:&nbsp;Copy&gt; Copy for ParseResult&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for Stream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SourcePosition","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Span&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy, E:&nbsp;Copy&gt; Copy for Stream&lt;S, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy, U:&nbsp;Copy&gt; Copy for Stream&lt;S, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for PartialStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for CompleteStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for MaybePartialStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy&gt; Copy for SliceStream&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy&gt; Copy for IteratorStream&lt;Input&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Copy for PointerOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy&gt; Copy for Digit&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Error: ParseError&lt;&lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range, &lt;Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream&lt;Token = char&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Choice&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Copy, P2:&nbsp;Copy&gt; Copy for Or&lt;P1, P2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Optional&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for NotFollowedBy&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Try&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for LookAhead&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for Map&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for MapInput&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for FlatMap&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for AndThen&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Recognize&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Ignore&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Lazy&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, R:&nbsp;Copy&gt; Copy for Factory&lt;P, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, Input:&nbsp;Copy, O:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for Opaque&lt;F, Input, O, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for FnParser&lt;Input, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy, Input:&nbsp;Copy, T:&nbsp;Copy&gt; Copy for EnvParser&lt;E, Input, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for CountMinMax&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Many&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Many1&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for SepBy&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for SepBy1&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for SepEndBy&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for SepEndBy1&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, Op:&nbsp;Copy&gt; Copy for Chainl1&lt;P, Op&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, Op:&nbsp;Copy&gt; Copy for Chainr1&lt;P, Op&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for TakeUntil&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy, E:&nbsp;Copy&gt; Copy for RepeatUntil&lt;F, P, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Copy, P2:&nbsp;Copy&gt; Copy for With&lt;P1, P2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Copy, P2:&nbsp;Copy&gt; Copy for Skip&lt;P1, P2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy, L:&nbsp;Copy, R:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Between&lt;Input, L, R, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Error: ParseError&lt;&lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range, &lt;Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Parser&lt;Input&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Parser&lt;Input&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser&lt;Input&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Output: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for Then&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for ThenPartial&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for ThenRef&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy&gt; Copy for Any&lt;Input&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Satisfy&lt;Input, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for SatisfyMap&lt;Input, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy&gt; Copy for Token&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Token: PartialEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Token: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy&gt; Copy for Position&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy, Input:&nbsp;Copy&gt; Copy for OneOf&lt;T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy, Input:&nbsp;Copy&gt; Copy for NoneOf&lt;T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy, T:&nbsp;Copy&gt; Copy for Value&lt;Input, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for Produce&lt;Input, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Copy&gt; Copy for Eof&lt;Input&gt;","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Copy, R:&nbsp;Copy&gt; Copy for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["encoding"] = [{"text":"impl Copy for DecoderTrap","synthetic":false,"types":[]},{"text":"impl Copy for EncoderTrap","synthetic":false,"types":[]},{"text":"impl Copy for ErrorEncoding","synthetic":false,"types":[]},{"text":"impl Copy for ErrorEncoder","synthetic":false,"types":[]},{"text":"impl Copy for ErrorDecoder","synthetic":false,"types":[]},{"text":"impl Copy for ASCIIEncoding","synthetic":false,"types":[]},{"text":"impl Copy for ASCIIEncoder","synthetic":false,"types":[]},{"text":"impl Copy for ASCIIDecoder","synthetic":false,"types":[]},{"text":"impl Copy for SingleByteEncoding","synthetic":false,"types":[]},{"text":"impl Copy for SingleByteEncoder","synthetic":false,"types":[]},{"text":"impl Copy for SingleByteDecoder","synthetic":false,"types":[]},{"text":"impl Copy for UTF8Encoding","synthetic":false,"types":[]},{"text":"impl Copy for UTF8Encoder","synthetic":false,"types":[]},{"text":"impl Copy for UTF8Decoder","synthetic":false,"types":[]},{"text":"impl Copy for Little","synthetic":false,"types":[]},{"text":"impl Copy for Big","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for UTF16Encoding&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for UTF16Encoder&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Windows949Encoding","synthetic":false,"types":[]},{"text":"impl Copy for Windows949Encoder","synthetic":false,"types":[]},{"text":"impl Copy for EUCJPEncoding","synthetic":false,"types":[]},{"text":"impl Copy for EUCJPEncoder","synthetic":false,"types":[]},{"text":"impl Copy for Windows31JEncoding","synthetic":false,"types":[]},{"text":"impl Copy for Windows31JEncoder","synthetic":false,"types":[]},{"text":"impl Copy for ISO2022JPEncoding","synthetic":false,"types":[]},{"text":"impl Copy for ISO2022JPEncoder","synthetic":false,"types":[]},{"text":"impl Copy for GBK","synthetic":false,"types":[]},{"text":"impl Copy for GB18030","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for GBEncoding&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for GBEncoder&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for HZEncoding","synthetic":false,"types":[]},{"text":"impl Copy for HZEncoder","synthetic":false,"types":[]},{"text":"impl Copy for BigFive2003Encoding","synthetic":false,"types":[]},{"text":"impl Copy for BigFive2003Encoder","synthetic":false,"types":[]},{"text":"impl Copy for EncoderOnlyUTF8Encoding","synthetic":false,"types":[]}];
implementors["evmap"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CopyValue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Copy for Parse&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Copy for Canceled","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl Copy for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Copy for Reason","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Copy for StatusCode","synthetic":false,"types":[]},{"text":"impl Copy for Version","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Status&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Header&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Copy for HttpDate","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Copy for Config","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Copy for IpAddrRange","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4AddrRange","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6AddrRange","synthetic":false,"types":[]},{"text":"impl Copy for IpNet","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4Net","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6Net","synthetic":false,"types":[]},{"text":"impl Copy for IpSubnets","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4Subnets","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6Subnets","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Copy for DIR","synthetic":false,"types":[]},{"text":"impl Copy for group","synthetic":false,"types":[]},{"text":"impl Copy for utimbuf","synthetic":false,"types":[]},{"text":"impl Copy for timeval","synthetic":false,"types":[]},{"text":"impl Copy for timespec","synthetic":false,"types":[]},{"text":"impl Copy for rlimit","synthetic":false,"types":[]},{"text":"impl Copy for rusage","synthetic":false,"types":[]},{"text":"impl Copy for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Copy for hostent","synthetic":false,"types":[]},{"text":"impl Copy for iovec","synthetic":false,"types":[]},{"text":"impl Copy for pollfd","synthetic":false,"types":[]},{"text":"impl Copy for winsize","synthetic":false,"types":[]},{"text":"impl Copy for linger","synthetic":false,"types":[]},{"text":"impl Copy for sigval","synthetic":false,"types":[]},{"text":"impl Copy for itimerval","synthetic":false,"types":[]},{"text":"impl Copy for tms","synthetic":false,"types":[]},{"text":"impl Copy for servent","synthetic":false,"types":[]},{"text":"impl Copy for protoent","synthetic":false,"types":[]},{"text":"impl Copy for FILE","synthetic":false,"types":[]},{"text":"impl Copy for fpos_t","synthetic":false,"types":[]},{"text":"impl Copy for timezone","synthetic":false,"types":[]},{"text":"impl Copy for in_addr","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Copy for addrinfo","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Copy for fd_set","synthetic":false,"types":[]},{"text":"impl Copy for tm","synthetic":false,"types":[]},{"text":"impl Copy for sched_param","synthetic":false,"types":[]},{"text":"impl Copy for Dl_info","synthetic":false,"types":[]},{"text":"impl Copy for lconv","synthetic":false,"types":[]},{"text":"impl Copy for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for ifaddrs","synthetic":false,"types":[]},{"text":"impl Copy for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Copy for arpreq","synthetic":false,"types":[]},{"text":"impl Copy for arpreq_old","synthetic":false,"types":[]},{"text":"impl Copy for arphdr","synthetic":false,"types":[]},{"text":"impl Copy for mmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for epoll_event","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Copy for utsname","synthetic":false,"types":[]},{"text":"impl Copy for sigevent","synthetic":false,"types":[]},{"text":"impl Copy for fpos64_t","synthetic":false,"types":[]},{"text":"impl Copy for rlimit64","synthetic":false,"types":[]},{"text":"impl Copy for glob_t","synthetic":false,"types":[]},{"text":"impl Copy for passwd","synthetic":false,"types":[]},{"text":"impl Copy for spwd","synthetic":false,"types":[]},{"text":"impl Copy for dqblk","synthetic":false,"types":[]},{"text":"impl Copy for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Copy for itimerspec","synthetic":false,"types":[]},{"text":"impl Copy for fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for packet_mreq","synthetic":false,"types":[]},{"text":"impl Copy for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Copy for if_nameindex","synthetic":false,"types":[]},{"text":"impl Copy for msginfo","synthetic":false,"types":[]},{"text":"impl Copy for sembuf","synthetic":false,"types":[]},{"text":"impl Copy for input_event","synthetic":false,"types":[]},{"text":"impl Copy for input_id","synthetic":false,"types":[]},{"text":"impl Copy for input_absinfo","synthetic":false,"types":[]},{"text":"impl Copy for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Copy for input_mask","synthetic":false,"types":[]},{"text":"impl Copy for ff_replay","synthetic":false,"types":[]},{"text":"impl Copy for ff_trigger","synthetic":false,"types":[]},{"text":"impl Copy for ff_envelope","synthetic":false,"types":[]},{"text":"impl Copy for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_effect","synthetic":false,"types":[]},{"text":"impl Copy for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for ucred","synthetic":false,"types":[]},{"text":"impl Copy for mntent","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Copy for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for arpd_request","synthetic":false,"types":[]},{"text":"impl Copy for inotify_event","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_response","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Copy for regmatch_t","synthetic":false,"types":[]},{"text":"impl Copy for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Copy for __c_anonymous_sockaddr_can_tp","synthetic":false,"types":[]},{"text":"impl Copy for __c_anonymous_sockaddr_can_j1939","synthetic":false,"types":[]},{"text":"impl Copy for can_filter","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Copy for dirent","synthetic":false,"types":[]},{"text":"impl Copy for dirent64","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Copy for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Copy for mq_attr","synthetic":false,"types":[]},{"text":"impl Copy for __c_anonymous_sockaddr_can_can_addr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_can","synthetic":false,"types":[]},{"text":"impl Copy for statx","synthetic":false,"types":[]},{"text":"impl Copy for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Copy for aiocb","synthetic":false,"types":[]},{"text":"impl Copy for __exit_status","synthetic":false,"types":[]},{"text":"impl Copy for __timeval","synthetic":false,"types":[]},{"text":"impl Copy for glob64_t","synthetic":false,"types":[]},{"text":"impl Copy for msghdr","synthetic":false,"types":[]},{"text":"impl Copy for cmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for termios","synthetic":false,"types":[]},{"text":"impl Copy for mallinfo","synthetic":false,"types":[]},{"text":"impl Copy for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Copy for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Copy for nlattr","synthetic":false,"types":[]},{"text":"impl Copy for rtentry","synthetic":false,"types":[]},{"text":"impl Copy for timex","synthetic":false,"types":[]},{"text":"impl Copy for ntptimeval","synthetic":false,"types":[]},{"text":"impl Copy for regex_t","synthetic":false,"types":[]},{"text":"impl Copy for utmpx","synthetic":false,"types":[]},{"text":"impl Copy for sigset_t","synthetic":false,"types":[]},{"text":"impl Copy for sysinfo","synthetic":false,"types":[]},{"text":"impl Copy for msqid_ds","synthetic":false,"types":[]},{"text":"impl Copy for sigaction","synthetic":false,"types":[]},{"text":"impl Copy for statfs","synthetic":false,"types":[]},{"text":"impl Copy for flock","synthetic":false,"types":[]},{"text":"impl Copy for flock64","synthetic":false,"types":[]},{"text":"impl Copy for siginfo_t","synthetic":false,"types":[]},{"text":"impl Copy for stack_t","synthetic":false,"types":[]},{"text":"impl Copy for stat","synthetic":false,"types":[]},{"text":"impl Copy for stat64","synthetic":false,"types":[]},{"text":"impl Copy for statfs64","synthetic":false,"types":[]},{"text":"impl Copy for statvfs64","synthetic":false,"types":[]},{"text":"impl Copy for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Copy for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Copy for user","synthetic":false,"types":[]},{"text":"impl Copy for mcontext_t","synthetic":false,"types":[]},{"text":"impl Copy for ipc_perm","synthetic":false,"types":[]},{"text":"impl Copy for shmid_ds","synthetic":false,"types":[]},{"text":"impl Copy for termios2","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Copy for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Copy for ucontext_t","synthetic":false,"types":[]},{"text":"impl Copy for statvfs","synthetic":false,"types":[]},{"text":"impl Copy for max_align_t","synthetic":false,"types":[]},{"text":"impl Copy for sem_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Copy for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Copy for can_frame","synthetic":false,"types":[]},{"text":"impl Copy for canfd_frame","synthetic":false,"types":[]},{"text":"impl Copy for in6_addr","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl&lt;'a&gt; Copy for Name&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["mime_guess"] = [{"text":"impl Copy for MimeGuess","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Copy for Interest","synthetic":false,"types":[]},{"text":"impl Copy for Token","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Copy for WaitTimeoutResult","synthetic":false,"types":[]},{"text":"impl Copy for OnceState","synthetic":false,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Copy for ParkResult","synthetic":false,"types":[]},{"text":"impl Copy for UnparkResult","synthetic":false,"types":[]},{"text":"impl Copy for RequeueOp","synthetic":false,"types":[]},{"text":"impl Copy for FilterOp","synthetic":false,"types":[]},{"text":"impl Copy for UnparkToken","synthetic":false,"types":[]},{"text":"impl Copy for ParkToken","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Delimiter","synthetic":false,"types":[]},{"text":"impl Copy for Spacing","synthetic":false,"types":[]}];
implementors["ratelimit_meter"] = [{"text":"impl Copy for Allower","synthetic":false,"types":[]},{"text":"impl Copy for Always","synthetic":false,"types":[]}];
implementors["redis"] = [{"text":"impl Copy for StreamMaxlen","synthetic":false,"types":[]},{"text":"impl Copy for NumericBehavior","synthetic":false,"types":[]},{"text":"impl Copy for ErrorKind","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl Copy for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Copy for Flag","synthetic":false,"types":[]},{"text":"impl Copy for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Copy for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Range","synthetic":false,"types":[]}];
implementors["ring"] = [{"text":"impl&lt;B:&nbsp;Copy&gt; Copy for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Positive&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Digest","synthetic":false,"types":[]},{"text":"impl Copy for Unspecified","synthetic":false,"types":[]},{"text":"impl Copy for KeyRejected","synthetic":false,"types":[]},{"text":"impl Copy for Algorithm","synthetic":false,"types":[]},{"text":"impl Copy for Algorithm","synthetic":false,"types":[]},{"text":"impl Copy for Tag","synthetic":false,"types":[]},{"text":"impl Copy for Algorithm","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Copy&gt; Copy for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt; + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Signature","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Copy&gt; Copy for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rustls"] = [{"text":"impl Copy for ProtocolVersion","synthetic":false,"types":[]},{"text":"impl Copy for HashAlgorithm","synthetic":false,"types":[]},{"text":"impl Copy for SignatureAlgorithm","synthetic":false,"types":[]},{"text":"impl Copy for ClientCertificateType","synthetic":false,"types":[]},{"text":"impl Copy for Compression","synthetic":false,"types":[]},{"text":"impl Copy for ContentType","synthetic":false,"types":[]},{"text":"impl Copy for HandshakeType","synthetic":false,"types":[]},{"text":"impl Copy for AlertLevel","synthetic":false,"types":[]},{"text":"impl Copy for AlertDescription","synthetic":false,"types":[]},{"text":"impl Copy for HeartbeatMessageType","synthetic":false,"types":[]},{"text":"impl Copy for ExtensionType","synthetic":false,"types":[]},{"text":"impl Copy for ServerNameType","synthetic":false,"types":[]},{"text":"impl Copy for NamedCurve","synthetic":false,"types":[]},{"text":"impl Copy for NamedGroup","synthetic":false,"types":[]},{"text":"impl Copy for CipherSuite","synthetic":false,"types":[]},{"text":"impl Copy for ECPointFormat","synthetic":false,"types":[]},{"text":"impl Copy for HeartbeatMode","synthetic":false,"types":[]},{"text":"impl Copy for ECCurveType","synthetic":false,"types":[]},{"text":"impl Copy for SignatureScheme","synthetic":false,"types":[]},{"text":"impl Copy for PSKKeyExchangeMode","synthetic":false,"types":[]},{"text":"impl Copy for KeyUpdateRequest","synthetic":false,"types":[]},{"text":"impl Copy for CertificateStatusType","synthetic":false,"types":[]},{"text":"impl Copy for SessionID","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["sct"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl&lt;E&gt; Copy for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Copy for Category","synthetic":false,"types":[]}];
implementors["sha1"] = [{"text":"impl Copy for Digest","synthetic":false,"types":[]},{"text":"impl Copy for DigestParseError","synthetic":false,"types":[]}];
implementors["shellwords"] = [{"text":"impl Copy for MismatchedQuotes","synthetic":false,"types":[]}];
implementors["snafu"] = [{"text":"impl Copy for UsualCase","synthetic":false,"types":[]},{"text":"impl Copy for UsedInTightLoop","synthetic":false,"types":[]},{"text":"impl Copy for SnafuErrorAsSource","synthetic":false,"types":[]},{"text":"impl Copy for SourceErrorDoesNotHaveBacktrace","synthetic":false,"types":[]},{"text":"impl&lt;__T0:&nbsp;Copy&gt; Copy for Leaf&lt;__T0&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Intermediate","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl Copy for Domain","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Protocol","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Copy for Underscore","synthetic":false,"types":[]},{"text":"impl Copy for Abstract","synthetic":false,"types":[]},{"text":"impl Copy for As","synthetic":false,"types":[]},{"text":"impl Copy for Async","synthetic":false,"types":[]},{"text":"impl Copy for Auto","synthetic":false,"types":[]},{"text":"impl Copy for Await","synthetic":false,"types":[]},{"text":"impl Copy for Become","synthetic":false,"types":[]},{"text":"impl Copy for Box","synthetic":false,"types":[]},{"text":"impl Copy for Break","synthetic":false,"types":[]},{"text":"impl Copy for Const","synthetic":false,"types":[]},{"text":"impl Copy for Continue","synthetic":false,"types":[]},{"text":"impl Copy for Crate","synthetic":false,"types":[]},{"text":"impl Copy for Default","synthetic":false,"types":[]},{"text":"impl Copy for Do","synthetic":false,"types":[]},{"text":"impl Copy for Dyn","synthetic":false,"types":[]},{"text":"impl Copy for Else","synthetic":false,"types":[]},{"text":"impl Copy for Enum","synthetic":false,"types":[]},{"text":"impl Copy for Extern","synthetic":false,"types":[]},{"text":"impl Copy for Final","synthetic":false,"types":[]},{"text":"impl Copy for Fn","synthetic":false,"types":[]},{"text":"impl Copy for For","synthetic":false,"types":[]},{"text":"impl Copy for If","synthetic":false,"types":[]},{"text":"impl Copy for Impl","synthetic":false,"types":[]},{"text":"impl Copy for In","synthetic":false,"types":[]},{"text":"impl Copy for Let","synthetic":false,"types":[]},{"text":"impl Copy for Loop","synthetic":false,"types":[]},{"text":"impl Copy for Macro","synthetic":false,"types":[]},{"text":"impl Copy for Match","synthetic":false,"types":[]},{"text":"impl Copy for Mod","synthetic":false,"types":[]},{"text":"impl Copy for Move","synthetic":false,"types":[]},{"text":"impl Copy for Mut","synthetic":false,"types":[]},{"text":"impl Copy for Override","synthetic":false,"types":[]},{"text":"impl Copy for Priv","synthetic":false,"types":[]},{"text":"impl Copy for Pub","synthetic":false,"types":[]},{"text":"impl Copy for Ref","synthetic":false,"types":[]},{"text":"impl Copy for Return","synthetic":false,"types":[]},{"text":"impl Copy for SelfType","synthetic":false,"types":[]},{"text":"impl Copy for SelfValue","synthetic":false,"types":[]},{"text":"impl Copy for Static","synthetic":false,"types":[]},{"text":"impl Copy for Struct","synthetic":false,"types":[]},{"text":"impl Copy for Super","synthetic":false,"types":[]},{"text":"impl Copy for Trait","synthetic":false,"types":[]},{"text":"impl Copy for Try","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Typeof","synthetic":false,"types":[]},{"text":"impl Copy for Union","synthetic":false,"types":[]},{"text":"impl Copy for Unsafe","synthetic":false,"types":[]},{"text":"impl Copy for Unsized","synthetic":false,"types":[]},{"text":"impl Copy for Use","synthetic":false,"types":[]},{"text":"impl Copy for Virtual","synthetic":false,"types":[]},{"text":"impl Copy for Where","synthetic":false,"types":[]},{"text":"impl Copy for While","synthetic":false,"types":[]},{"text":"impl Copy for Yield","synthetic":false,"types":[]},{"text":"impl Copy for Add","synthetic":false,"types":[]},{"text":"impl Copy for AddEq","synthetic":false,"types":[]},{"text":"impl Copy for And","synthetic":false,"types":[]},{"text":"impl Copy for AndAnd","synthetic":false,"types":[]},{"text":"impl Copy for AndEq","synthetic":false,"types":[]},{"text":"impl Copy for At","synthetic":false,"types":[]},{"text":"impl Copy for Bang","synthetic":false,"types":[]},{"text":"impl Copy for Caret","synthetic":false,"types":[]},{"text":"impl Copy for CaretEq","synthetic":false,"types":[]},{"text":"impl Copy for Colon","synthetic":false,"types":[]},{"text":"impl Copy for Colon2","synthetic":false,"types":[]},{"text":"impl Copy for Comma","synthetic":false,"types":[]},{"text":"impl Copy for Div","synthetic":false,"types":[]},{"text":"impl Copy for DivEq","synthetic":false,"types":[]},{"text":"impl Copy for Dollar","synthetic":false,"types":[]},{"text":"impl Copy for Dot","synthetic":false,"types":[]},{"text":"impl Copy for Dot2","synthetic":false,"types":[]},{"text":"impl Copy for Dot3","synthetic":false,"types":[]},{"text":"impl Copy for DotDotEq","synthetic":false,"types":[]},{"text":"impl Copy for Eq","synthetic":false,"types":[]},{"text":"impl Copy for EqEq","synthetic":false,"types":[]},{"text":"impl Copy for Ge","synthetic":false,"types":[]},{"text":"impl Copy for Gt","synthetic":false,"types":[]},{"text":"impl Copy for Le","synthetic":false,"types":[]},{"text":"impl Copy for Lt","synthetic":false,"types":[]},{"text":"impl Copy for MulEq","synthetic":false,"types":[]},{"text":"impl Copy for Ne","synthetic":false,"types":[]},{"text":"impl Copy for Or","synthetic":false,"types":[]},{"text":"impl Copy for OrEq","synthetic":false,"types":[]},{"text":"impl Copy for OrOr","synthetic":false,"types":[]},{"text":"impl Copy for Pound","synthetic":false,"types":[]},{"text":"impl Copy for Question","synthetic":false,"types":[]},{"text":"impl Copy for RArrow","synthetic":false,"types":[]},{"text":"impl Copy for LArrow","synthetic":false,"types":[]},{"text":"impl Copy for Rem","synthetic":false,"types":[]},{"text":"impl Copy for RemEq","synthetic":false,"types":[]},{"text":"impl Copy for FatArrow","synthetic":false,"types":[]},{"text":"impl Copy for Semi","synthetic":false,"types":[]},{"text":"impl Copy for Shl","synthetic":false,"types":[]},{"text":"impl Copy for ShlEq","synthetic":false,"types":[]},{"text":"impl Copy for Shr","synthetic":false,"types":[]},{"text":"impl Copy for ShrEq","synthetic":false,"types":[]},{"text":"impl Copy for Star","synthetic":false,"types":[]},{"text":"impl Copy for Sub","synthetic":false,"types":[]},{"text":"impl Copy for SubEq","synthetic":false,"types":[]},{"text":"impl Copy for Tilde","synthetic":false,"types":[]},{"text":"impl Copy for Brace","synthetic":false,"types":[]},{"text":"impl Copy for Bracket","synthetic":false,"types":[]},{"text":"impl Copy for Paren","synthetic":false,"types":[]},{"text":"impl Copy for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AttrStyle","synthetic":false,"types":[]},{"text":"impl Copy for BinOp","synthetic":false,"types":[]},{"text":"impl Copy for RangeLimits","synthetic":false,"types":[]},{"text":"impl Copy for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Copy for UnOp","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Copy for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
implementors["tgbot"] = [{"text":"impl Copy for GetMyCommands","synthetic":false,"types":[]},{"text":"impl Copy for DeleteWebhook","synthetic":false,"types":[]},{"text":"impl Copy for GetWebhookInfo","synthetic":false,"types":[]},{"text":"impl Copy for Close","synthetic":false,"types":[]},{"text":"impl Copy for GetMe","synthetic":false,"types":[]},{"text":"impl Copy for LogOut","synthetic":false,"types":[]},{"text":"impl Copy for ChatPermissions","synthetic":false,"types":[]},{"text":"impl Copy for ChatAction","synthetic":false,"types":[]},{"text":"impl Copy for Dice","synthetic":false,"types":[]},{"text":"impl Copy for DiceKind","synthetic":false,"types":[]},{"text":"impl Copy for Location","synthetic":false,"types":[]},{"text":"impl Copy for ParseMode","synthetic":false,"types":[]},{"text":"impl Copy for PollKind","synthetic":false,"types":[]},{"text":"impl Copy for MessageId","synthetic":false,"types":[]},{"text":"impl Copy for ForceReply","synthetic":false,"types":[]},{"text":"impl Copy for KeyboardButtonPollType","synthetic":false,"types":[]},{"text":"impl Copy for MaskPositionPoint","synthetic":false,"types":[]},{"text":"impl Copy for MaskPosition","synthetic":false,"types":[]},{"text":"impl Copy for TextEntityPosition","synthetic":false,"types":[]},{"text":"impl Copy for AllowedUpdate","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Copy + Array&gt; Copy for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Copy for Interest","synthetic":false,"types":[]},{"text":"impl Copy for Ready","synthetic":false,"types":[]},{"text":"impl Copy for UCred","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Instant","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Copy for BytesCodec","synthetic":false,"types":[]},{"text":"impl Copy for Builder","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for Ascii&lt;S&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for BidiClass","synthetic":false,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Copy for Input&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for EndOfInput","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl Copy for ParseError","synthetic":false,"types":[]},{"text":"impl Copy for SyntaxViolation","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ParseOptions&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for DNSNameRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for InvalidDNSNameError","synthetic":false,"types":[]},{"text":"impl Copy for Time","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()