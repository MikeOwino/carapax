(function() {var implementors = {};
implementors["bytes"] = [{"text":"impl From&lt;&amp;'static [u8]&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static str&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [u8]&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl From&lt;BytesMut&gt; for Bytes","synthetic":false,"types":[]}];
implementors["carapax"] = [{"text":"impl From&lt;()&gt; for HandlerResult","synthetic":false,"types":[]},{"text":"impl&lt;T, E&gt; From&lt;Result&lt;T, E&gt;&gt; for HandlerResult <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;HandlerResult&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Error + Send + Sync + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;PrincipalUser&gt; for Principal","synthetic":false,"types":[]},{"text":"impl From&lt;PrincipalChat&gt; for Principal","synthetic":false,"types":[]},{"text":"impl From&lt;(PrincipalChat, PrincipalUser)&gt; for Principal","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for PrincipalUser","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for PrincipalUser","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for PrincipalUser","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for PrincipalChat","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for PrincipalChat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for PrincipalChat","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; From&lt;S&gt; for TranslationKey <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Into&lt;String&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["combine"] = [{"text":"impl&lt;R, F&gt; From&lt;char&gt; for Info&lt;char, R, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R, F&gt; From&lt;&amp;'static str&gt; for Info&lt;T, R, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R, F&gt; From&lt;u8&gt; for Info&lt;u8, R, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R&gt; From&lt;Token&lt;T&gt;&gt; for Info&lt;T, R, &amp;'static str&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R&gt; From&lt;Range&lt;R&gt;&gt; for Info&lt;T, R, &amp;'static str&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R, F&gt; From&lt;Static&gt; for Info&lt;T, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, R, F&gt; From&lt;Format&lt;F&gt;&gt; for Info&lt;T, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; From&lt;E&gt; for Tracked&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;O, E&gt; From&lt;Result&lt;(O, Commit&lt;()&gt;), Commit&lt;Tracked&lt;E&gt;&gt;&gt;&gt; for ParseResult&lt;O, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R, F&gt; From&lt;Info&lt;T, R, F&gt;&gt; for Info&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R&gt; From&lt;char&gt; for Info&lt;char, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R&gt; From&lt;String&gt; for Info&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R&gt; From&lt;&amp;'static str&gt; for Info&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R&gt; From&lt;u8&gt; for Info&lt;u8, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R, E&gt; From&lt;E&gt; for Error&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: StdError + 'static + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; From&lt;S&gt; for Stream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P&gt; From&lt;P&gt; for Span&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, E&gt; From&lt;S&gt; for Stream&lt;S, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, P&gt; From&lt;Error&lt;Errors&lt;u8, &amp;'a [u8], P&gt;, P&gt;&gt; for Errors&lt;u8, &amp;'a [u8], P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Ord + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; From&lt;S&gt; for PartialStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; From&lt;S&gt; for CompleteStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'s, S&gt; From&lt;&amp;'s mut S&gt; for &amp;'s mut CompleteStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;usize&gt;&gt; for TakeRange","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; From&lt;Result&lt;R, L&gt;&gt; for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["evmap"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; From&lt;T&gt; for CopyValue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl&lt;'a, T&gt; From&lt;FutureObj&lt;'a, T&gt;&gt; for LocalFutureObj&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Future&lt;Output = ()&gt; + Send + 'a&gt; From&lt;Box&lt;F, Global&gt;&gt; for FutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Box&lt;dyn Future&lt;Output = ()&gt; + 'a + Send, Global&gt;&gt; for FutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Future&lt;Output = ()&gt; + Send + 'a&gt; From&lt;Pin&lt;Box&lt;F, Global&gt;&gt;&gt; for FutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Pin&lt;Box&lt;dyn Future&lt;Output = ()&gt; + 'a + Send, Global&gt;&gt;&gt; for FutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Future&lt;Output = ()&gt; + 'a&gt; From&lt;Box&lt;F, Global&gt;&gt; for LocalFutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Box&lt;dyn Future&lt;Output = ()&gt; + 'a, Global&gt;&gt; for LocalFutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Future&lt;Output = ()&gt; + 'a&gt; From&lt;Pin&lt;Box&lt;F, Global&gt;&gt;&gt; for LocalFutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Pin&lt;Box&lt;dyn Future&lt;Output = ()&gt; + 'a, Global&gt;&gt;&gt; for LocalFutureObj&lt;'a, ()&gt;","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;T&gt; From&lt;Option&lt;T&gt;&gt; for OptionFuture&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Mutex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["gettext"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Cow&lt;'static, str&gt;&gt; for Error","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl From&lt;Reason&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Reason","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl&lt;'a&gt; From&lt;&amp;'a HeaderName&gt; for HeaderName","synthetic":false,"types":[]},{"text":"impl From&lt;HeaderName&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a HeaderValue&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Method&gt; for Method","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a StatusCode&gt; for StatusCode","synthetic":false,"types":[]},{"text":"impl From&lt;Uri&gt; for Parts","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidStatusCode&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidMethod&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidUri&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidUriParts&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidHeaderName&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidHeaderValue&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Infallible&gt; for Error","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl From&lt;SystemTime&gt; for HttpDate","synthetic":false,"types":[]},{"text":"impl From&lt;ParseIntError&gt; for Error","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl From&lt;Bytes&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static [u8]&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Cow&lt;'static, [u8]&gt;&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static str&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Cow&lt;'static, str&gt;&gt; for Body","synthetic":false,"types":[]}];
implementors["hyper_rustls"] = [{"text":"impl&lt;H, C&gt; From&lt;(H, C)&gt; for HttpsConnector&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Into&lt;Arc&lt;ClientConfig&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for MaybeHttpsStream&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;TlsStream&lt;T&gt;&gt; for MaybeHttpsStream&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl From&lt;Ipv4AddrRange&gt; for IpAddrRange","synthetic":false,"types":[]},{"text":"impl From&lt;Ipv6AddrRange&gt; for IpAddrRange","synthetic":false,"types":[]},{"text":"impl From&lt;Ipv4Net&gt; for IpNet","synthetic":false,"types":[]},{"text":"impl From&lt;Ipv6Net&gt; for IpNet","synthetic":false,"types":[]},{"text":"impl From&lt;IpAddr&gt; for IpNet","synthetic":false,"types":[]},{"text":"impl From&lt;Ipv4Addr&gt; for Ipv4Net","synthetic":false,"types":[]},{"text":"impl From&lt;Ipv6Addr&gt; for Ipv6Net","synthetic":false,"types":[]},{"text":"impl From&lt;Ipv4Subnets&gt; for IpSubnets","synthetic":false,"types":[]},{"text":"impl From&lt;Ipv6Subnets&gt; for IpSubnets","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;R:&nbsp;RawMutex, T&gt; From&lt;T&gt; for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex, G:&nbsp;GetThreadId, T&gt; From&lt;T&gt; for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock, T&gt; From&lt;T&gt; for RwLock&lt;R, T&gt;","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl From&lt;ChildStdin&gt; for Sender","synthetic":false,"types":[]},{"text":"impl From&lt;ChildStdout&gt; for Receiver","synthetic":false,"types":[]},{"text":"impl From&lt;ChildStderr&gt; for Receiver","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl From&lt;Span&gt; for Span","synthetic":false,"types":[]},{"text":"impl From&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;Group&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Ident&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Punct&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for TokenTree","synthetic":false,"types":[]}];
implementors["redis"] = [{"text":"impl From&lt;Error&gt; for RedisError","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Error&gt; for RedisError","synthetic":false,"types":[]},{"text":"impl From&lt;FromUtf8Error&gt; for RedisError","synthetic":false,"types":[]},{"text":"impl From&lt;(ErrorKind, &amp;'static str)&gt; for RedisError","synthetic":false,"types":[]},{"text":"impl From&lt;(ErrorKind, &amp;'static str, String)&gt; for RedisError","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["reqwest"] = [{"text":"impl From&lt;Bytes&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static [u8]&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static str&gt; for Body","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Body&gt;&gt; From&lt;Response&lt;T&gt;&gt; for Response","synthetic":false,"types":[]},{"text":"impl From&lt;Response&gt; for Body","synthetic":false,"types":[]}];
implementors["ring"] = [{"text":"impl From&lt;Okm&lt;'_, &amp;'static Algorithm&gt;&gt; for UnboundKey","synthetic":false,"types":[]},{"text":"impl From&lt;Okm&lt;'_, &amp;'static Algorithm&gt;&gt; for HeaderProtectionKey","synthetic":false,"types":[]},{"text":"impl From&lt;EndOfInput&gt; for Unspecified","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromSliceError&gt; for Unspecified","synthetic":false,"types":[]},{"text":"impl From&lt;KeyRejected&gt; for Unspecified","synthetic":false,"types":[]},{"text":"impl From&lt;Okm&lt;'_, Algorithm&gt;&gt; for Salt","synthetic":false,"types":[]},{"text":"impl From&lt;Okm&lt;'_, Algorithm&gt;&gt; for Prk","synthetic":false,"types":[]},{"text":"impl From&lt;Okm&lt;'_, Algorithm&gt;&gt; for Key","synthetic":false,"types":[]}];
implementors["rustls"] = [{"text":"impl From&lt;TrustAnchor&lt;'_&gt;&gt; for OwnedTrustAnchor","synthetic":false,"types":[]},{"text":"impl From&lt;Okm&lt;'_, PayloadU8Len&gt;&gt; for PayloadU8","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Cow&lt;'a, str&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Number&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Map&lt;String, Value&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Value&gt;&gt; From&lt;Vec&lt;T, Global&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Into&lt;Value&gt;&gt; From&lt;&amp;'a [T]&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;()&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Number","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for Number","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, A:&nbsp;Array&gt; From&lt;&amp;'a [&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;Vec&lt;&lt;A as Array&gt;::Item, Global&gt;&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;A&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl From&lt;SocketAddrV4&gt; for SockAddr","synthetic":false,"types":[]},{"text":"impl From&lt;SocketAddrV6&gt; for SockAddr","synthetic":false,"types":[]},{"text":"impl From&lt;SocketAddr&gt; for SockAddr","synthetic":false,"types":[]},{"text":"impl From&lt;TcpStream&gt; for Socket","synthetic":false,"types":[]},{"text":"impl From&lt;TcpListener&gt; for Socket","synthetic":false,"types":[]},{"text":"impl From&lt;UdpSocket&gt; for Socket","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Domain","synthetic":false,"types":[]},{"text":"impl From&lt;Domain&gt; for c_int","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;Type&gt; for c_int","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Protocol","synthetic":false,"types":[]},{"text":"impl From&lt;Protocol&gt; for c_int","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl From&lt;SelfValue&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;SelfType&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Super&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Crate&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Extern&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Underscore&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Path&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;MetaList&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;MetaNameValue&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;Meta&gt; for NestedMeta","synthetic":false,"types":[]},{"text":"impl From&lt;Lit&gt; for NestedMeta","synthetic":false,"types":[]},{"text":"impl From&lt;FieldsNamed&gt; for Fields","synthetic":false,"types":[]},{"text":"impl From&lt;FieldsUnnamed&gt; for Fields","synthetic":false,"types":[]},{"text":"impl From&lt;VisPublic&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;VisCrate&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;VisRestricted&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;ExprArray&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAssign&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAssignOp&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAsync&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAwait&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBinary&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBlock&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBox&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBreak&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprCall&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprCast&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprClosure&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprContinue&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprField&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprForLoop&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprGroup&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprIf&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprIndex&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLet&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLit&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLoop&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMacro&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMatch&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMethodCall&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprParen&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprPath&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprRange&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprReference&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprRepeat&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprReturn&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprStruct&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTry&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTryBlock&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTuple&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprType&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprUnary&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprUnsafe&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprWhile&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprYield&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Index","synthetic":false,"types":[]},{"text":"impl From&lt;TypeParam&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;LifetimeDef&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;ConstParam&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;Ident&gt; for TypeParam","synthetic":false,"types":[]},{"text":"impl From&lt;TraitBound&gt; for TypeParamBound","synthetic":false,"types":[]},{"text":"impl From&lt;Lifetime&gt; for TypeParamBound","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateType&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateLifetime&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateEq&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;ItemConst&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemEnum&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemExternCrate&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemFn&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemForeignMod&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemImpl&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMacro&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMacro2&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMod&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStatic&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStruct&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemTrait&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemTraitAlias&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemType&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUnion&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUse&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;DeriveInput&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStruct&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;ItemEnum&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUnion&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;UsePath&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseName&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseRename&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseGlob&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseGroup&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemFn&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemStatic&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemType&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemMacro&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemConst&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemMethod&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemType&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemMacro&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemConst&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemMethod&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemType&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemMacro&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;Receiver&gt; for FnArg","synthetic":false,"types":[]},{"text":"impl From&lt;PatType&gt; for FnArg","synthetic":false,"types":[]},{"text":"impl From&lt;LitStr&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitByteStr&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitByte&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitChar&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitInt&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitFloat&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitBool&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for LitInt","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for LitFloat","synthetic":false,"types":[]},{"text":"impl From&lt;DataStruct&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;DataEnum&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;DataUnion&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;TypeArray&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeBareFn&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeGroup&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeImplTrait&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeInfer&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeMacro&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeNever&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeParen&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypePath&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypePtr&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeReference&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeSlice&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeTraitObject&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeTuple&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;PatBox&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatIdent&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatLit&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatMacro&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatOr&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatPath&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatRange&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatReference&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatRest&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatSlice&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatStruct&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatTuple&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatTupleStruct&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatType&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatWild&gt; for Pat","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Path <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;PathSegment&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for PathSegment <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Ident&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;LexError&gt; for Error","synthetic":false,"types":[]}];
implementors["tgbot"] = [{"text":"impl&lt;S&gt; From&lt;S&gt; for Config <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Into&lt;String&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;ParseError&gt; for ParseProxyError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for ParseProxyError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for DownloadFileError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for ExecuteError","synthetic":false,"types":[]},{"text":"impl From&lt;ResponseError&gt; for ExecuteError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for ExecuteError","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ str&gt; for ChatId","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for ChatId","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for ChatId","synthetic":false,"types":[]},{"text":"impl From&lt;FromUtf16Error&gt; for CommandError","synthetic":false,"types":[]},{"text":"impl From&lt;MismatchedQuotes&gt; for CommandError","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ str&gt; for InputFileInfo","synthetic":false,"types":[]},{"text":"impl From&lt;(&amp;'_ str, Mime)&gt; for InputFileInfo","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for InputFileInfo","synthetic":false,"types":[]},{"text":"impl From&lt;(String, Mime)&gt; for InputFileInfo","synthetic":false,"types":[]},{"text":"impl&lt;R&gt; From&lt;R&gt; for InputFileReader <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsyncRead + Send + Sync + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;InputFileReader&gt; for InputFile","synthetic":false,"types":[]},{"text":"impl&lt;R&gt; From&lt;R&gt; for InputFile <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsyncRead + Send + Sync + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;InputMessageContentVenue&gt; for InputMessageContent","synthetic":false,"types":[]},{"text":"impl From&lt;InputMessageContentText&gt; for InputMessageContent","synthetic":false,"types":[]},{"text":"impl From&lt;InputMessageContentContact&gt; for InputMessageContent","synthetic":false,"types":[]},{"text":"impl From&lt;InputMessageContentLocation&gt; for InputMessageContent","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultCachedPhoto&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultCachedMpeg4Gif&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultGame&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultLocation&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultCachedSticker&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultVenue&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultDocument&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultAudio&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultMpeg4Gif&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultVideo&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultVoice&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultCachedGif&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultArticle&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultContact&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultCachedDocument&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultGif&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultCachedVideo&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultPhoto&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultCachedVoice&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl From&lt;InlineQueryResultCachedAudio&gt; for InlineQueryResult","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; From&lt;S&gt; for LoginUrl <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Into&lt;String&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;Vec&lt;InlineKeyboardButton, Global&gt;, Global&gt;&gt; for InlineKeyboardMarkup","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;Vec&lt;KeyboardButton, Global&gt;, Global&gt;&gt; for ReplyKeyboardMarkup","synthetic":false,"types":[]},{"text":"impl From&lt;PollKind&gt; for KeyboardButtonPollType","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;PollKind&gt;&gt; for KeyboardButtonPollType","synthetic":false,"types":[]},{"text":"impl From&lt;ReplyKeyboardRemove&gt; for ReplyMarkup","synthetic":false,"types":[]},{"text":"impl From&lt;ReplyKeyboardMarkup&gt; for ReplyMarkup","synthetic":false,"types":[]},{"text":"impl From&lt;ForceReply&gt; for ReplyMarkup","synthetic":false,"types":[]},{"text":"impl From&lt;InlineKeyboardMarkup&gt; for ReplyMarkup","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;Vec&lt;InlineKeyboardButton, Global&gt;, Global&gt;&gt; for ReplyMarkup","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;Vec&lt;KeyboardButton, Global&gt;, Global&gt;&gt; for ReplyMarkup","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ str&gt; for UserId","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for UserId","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for UserId","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;A&gt; for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'s, T&gt; From&lt;&amp;'s mut [T]&gt; for SliceVec&lt;'s, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'s, T, A&gt; From&lt;&amp;'s mut A&gt; for SliceVec&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: AsMut&lt;[T]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;ArrayVec&lt;A&gt;&gt; for TinyVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;A&gt; for TinyVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, A&gt; From&lt;&amp;'_ [T]&gt; for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, A&gt; From&lt;&amp;'_ mut [T]&gt; for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl From&lt;File&gt; for File","synthetic":false,"types":[]},{"text":"impl From&lt;OpenOptions&gt; for OpenOptions","synthetic":false,"types":[]},{"text":"impl&lt;RW&gt; From&lt;BufReader&lt;BufWriter&lt;RW&gt;&gt;&gt; for BufStream&lt;RW&gt;","synthetic":false,"types":[]},{"text":"impl&lt;RW&gt; From&lt;BufWriter&lt;BufReader&lt;RW&gt;&gt;&gt; for BufStream&lt;RW&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;SendError&lt;T&gt;&gt; for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Instant&gt; for Instant","synthetic":false,"types":[]}];
implementors["tokio_rustls"] = [{"text":"impl From&lt;Arc&lt;ClientConfig&gt;&gt; for TlsConnector","synthetic":false,"types":[]},{"text":"impl From&lt;Arc&lt;ServerConfig&gt;&gt; for TlsAcceptor","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;TlsStream&lt;T&gt;&gt; for TlsStream&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;TlsStream&lt;T&gt;&gt; for TlsStream&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_socks"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Infallible&gt; for Error","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl From&lt;Error&gt; for LinesCodecError","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl&lt;S&gt; From&lt;S&gt; for Dispatch <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Subscriber + Send + Sync + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;Level&gt; for LevelFilter","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;Level&gt;&gt; for LevelFilter","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; From&lt;Ascii&lt;S&gt;&gt; for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;AsRef&lt;str&gt;&gt; From&lt;S&gt; for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for UniCase&lt;Cow&lt;'a, str&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;String&gt; for UniCase&lt;Cow&lt;'a, str&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for UniCase&lt;String&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Cow&lt;'a, str&gt;&gt; for UniCase&lt;String&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a String&gt; for UniCase&lt;&amp;'a str&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl From&lt;u8&gt; for Level","synthetic":false,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; From&lt;&amp;'a [u8]&gt; for Input&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl From&lt;Errors&gt; for ParseError","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl From&lt;DNSNameRef&lt;'_&gt;&gt; for DNSName","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()